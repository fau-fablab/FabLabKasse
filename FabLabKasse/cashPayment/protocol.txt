
# (C) 2013 Max Gaukler <development@maxgaukler.de>

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The text of the license conditions can be read at
#  <http://www.gnu.org/licenses/>.



acceptor/dispenser intermediate protocol:

The two sides using this protocol are:
- FabLabKasse.cashPayment.client.CashDeviceClient, which is instantiated by CashDevicesManager
- abstract server base is FabLabKasse.cashPayment.server.cashServer. Specific implementations contain as little business logic as possible, see FabLabKasse.cashPayment.server.{mdbCoinChanger, nv11, exampleServer}

Each device driver is a separate process that is started by CashDeviceClient
It communicates via stdin/stdout in a plaintext fashion.
The GUI process ("client") sends commands, which are answered with some delay by the driver process ("server"). Each command is terminated by \n, each reply starts with "COMMAND ANSWER:" and ends with \n.
For testing purposes, you can also start the server yourself and enter commands like "POLL\n". If you don't follow the protocol, the server will/should halt with an AssertionError.

The structure of this documentation is as follows:
- Each section (limited by ----) describes one mode and the commands used within it. At startup and at at the end of each section, you are in idle mode and are free to choose another section of this document and follow the flow described there.
- Inside one section, commands and responses are described by an example communication.  This state flow must be followed, you can't just send random commands as you like.



--------------

ACCEPT 12345 # accept up to 123,45€
-> OK

[ optional:
|  POLL->  123 asdf blabla # ignore text output after the value. value is the currently paid amount
|  UPDATE-ACCEPT 10045 # lower the accepted amount to 100,45€ (UPDATE-ACCEPT may not be used for sending a higher amount than previously allowed)
| ...
]


# as soon as you want to stop accepting money:

STOP
-> wait

STOP
-> wait

[...]

STOP
-> OK 1234 # final amount


------------


DISPENSE 12345

[ optional: poll, like for ACCEPT, but negative values ]

# you can send STOP immediately, it will not abort the dispense operation, but wait to finish
STOP
-> wait

STOP
-> wait

[...]

STOP
-> OK 1234 # final amount


---------------

CANACCEPT
-> True (or False): device supports ACCEPT commands

-----

CANPAYOUT
-> OK 25000 999 # can payout any requested amount up to 250€, leaving an unpaid rest of at maximum 9,99€
(possible protocol extension: OK False == device does not support payout)

-------
Service mode: If possible, automatically empty storage into cashbox,
and allow manual emptying, e.g. with buttons for "eject money"

EMPTY
-> OK

(now manual emptying is allowed)

STOP
-> wait

(now manual emptying is stopped)

STOP
-> wait

[...]

STOP
-> OK

------

(Service mode: refilling is normal via ACCEPT command - this money will be counted just like money paid in by the user and therefore needs a corrective transfer in the cash audit log. see README.cashPayment)
